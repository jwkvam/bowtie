import 'normalize.css';
import React from 'react';
import PropTypes from 'prop-types';
import {render} from 'react-dom';
import {message} from 'antd';

import { components, socket } from './components';
import { str2ints } from './utils';


export class View{{ uuid }} extends React.Component {

    constructor(props) {
        super(props);
        this.state = {
            columns: this.props.columns,
            rows: this.props.rows,
            column_gap: this.props.column_gap,
            row_gap: this.props.row_gap,
            spans: this.props.spans,
            controllers: this.props.controllers,
            sidebar: this.props.sidebar,
        };
    }

    render() {
        var widgets = []
        const controls = this.state.controllers.map(index =>
            <div key={index.toString()}>{components[index]}</div>
        );
        for (const key in this.state.spans) {
            if (this.state.spans.hasOwnProperty(key)) {
                const comps = this.state.spans[key].map((number) =>
                    components[number]
                );
                const rowcols = str2ints(key)
                widgets.push(
                    <div key={key} style={{ '{{' }}
                            gridColumn: `${ rowcols[1] + this.state.sidebar } / ${ rowcols[3] + this.state.sidebar }`,
                            gridRow: `${rowcols[0]} / ${rowcols[2]}`,
                            position: 'relative'
                            {{ '}}' }}>
                        {comps}
                    </div>
                )
            }
        }

        return (
            <div style={{ '{{' }}display: 'grid',
                    gridTemplateColumns: this.state.columns,
                    gridTemplateRows: this.state.rows,
                    gridColumnGap: this.state.column_gap,
                    gridRowGap: this.state.row_gap,
                    width: '100%', height: '100%',
                    minHeight: '100vh', maxHeight: '100%',
                    minWidth: '100vw', maxWidth: '100%'{{ '}}' }}>

                {this.state.sidebar &&
                    <div style={{ '{{' }}padding: '7px', backgroundColor: '{{background_color}}',
                            gridColumn: '1 / 2',
                            gridRow: '1 / -1'
                            {{ '}}' }}>

                        {controls}
                    </div>
                }
                
                {widgets}

            </div>
        );
    }
}

View{{ uuid }}.propTypes = {
    uuid: PropTypes.string.isRequired,
    spans: PropTypes.object.isRequired,
    controllers: PropTypes.arrayOf(PropTypes.number).isRequired,
    columns: PropTypes.string.isRequired,
    rows: PropTypes.string.isRequired,
    column_gap: PropTypes.string.isRequired,
    row_gap: PropTypes.string.isRequired,
    sidebar: PropTypes.bool.isRequired,
}
