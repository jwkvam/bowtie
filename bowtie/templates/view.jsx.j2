import 'normalize.css';
import React from 'react';
import PropTypes from 'prop-types';
import {render} from 'react-dom';
import {message} from 'antd';

import components from './components';

export default class View{{ uuid }} extends React.Component {

    constructor(props) {
        super(props);
        this.state = {
            columns: this.props.columns,
            rows: this.props.rows,
            column_gap: this.props.column_gap,
            row_gap: this.props.row_gap,
            spans: this.props.spans,
            conrollers: this.props.controllers,
        };
    }

    render() {
        var socket = this.props.socket;
        return (
            <div style={{ '{{' }}display: 'grid',
                    gridTemplateColumns: this.state.columns,
                    gridTemplateRows: this.state.rows,
                    gridColumnGap: this.state.column_gap,
                    gridRowGap: this.state.row_gap,
                    width: '100%', height: '100%',
                    minHeight: '100vh', maxHeight: '100%',
                    minWidth: '100vw', maxWidth: '100%'{{ '}}' }}>

                {this.state.sidebar == true &&
                    <div style={{ '{{' }}padding: '7px', backgroundColor: '{{background_color}}',
                            gridColumn: '1 / 2',
                            gridRow: '1 / -1'
                            {{ '}}' }}>

                        {% for control in controls %}
                            {% if control.caption is not none %}
                                <div style={{ '{{' }}paddingBottom: '3px'{{ '}}' }}>
                                {{ control.caption }}
                                </div>
                            {% endif %}

                            <div style={{ '{{' }}paddingBottom: '7px'{{ '}}' }}>
                            {{ control.instantiate }}
                            </div>
                        {% endfor %}
                    </div>
                }

                {% for span, widgets in spans.items() %}
                    <div style={{ '{{' }}
                            gridColumn: '{{ span.column_start + sidebar }} / {{ span.column_end + sidebar }}',
                            gridRow: '{{ span.row_start }} / {{ span.row_end }}',
                            position: 'relative'
                            {{ '}}' }}>
                        {% for widget in widgets %}
                        {{ widget._instantiate }}
                        {% endfor %}
                    </div>
                {% endfor %}
                }
            </div>
        );
    }
}

View{{ uuid }}.propTypes = {
    uuid: PropTypes.string.isRequired,
    socket: PropTypes.object.isRequired,
    spans: PropTypes.object.isRequired,
    controllers: PropTypes.arrayOf(PropTypes.number).isRequired,
    columns: PropTypes.string.isRequired,
    rows: PropTypes.string.isRequired,
    column_gap: PropTypes.string.isRequired,
    row_gap: PropTypes.string.isRequired,
    sidebar: PropTypes.bool.isRequired,
}
