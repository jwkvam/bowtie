import 'normalize.css';
import React from 'react';
import {render} from 'react-dom';
import io from 'socket.io-client';
import {message} from 'antd';
import 'antd/dist/antd.css'

import AntProgress from './progress';

{% for component in components %}
import {{ component.component }} from './{{ component.module }}';
{% endfor %}

var msgpack = require('msgpack-lite');
var socket = io({path: '/{{ socketio }}socket.io'});

class Dashboard extends React.Component {
    constructor(props) {
        super(props);
        this.cache = {};
        socket.emit('INITIALIZE');
    }

    saveValue = data => {
        var arr = new Uint8Array(data['key']);
        var key = msgpack.decode(arr);
        this.cache[key] = data['data'];
    }

    loadValue = (data, fn) => {
        var arr = new Uint8Array(data['data']);
        var key = msgpack.decode(arr);
        if (this.cache.hasOwnProperty(key)) {
            fn(this.cache[key]);
        } else {
            var buffer = new ArrayBuffer(1);
            var x = new DataView(buffer, 0);
            // msgpack encodes null to 0xc0
            x.setUint8(0, 0xc0);
            fn(buffer);
        }
    }

    componentDidMount() {
        socket.on('cache_save', this.saveValue);
        socket.on('cache_load', this.loadValue);
        {% for page in pages %}
        socket.on('page#{{ page._uuid }}', function () {socket.emit('resp#{{ page._uuid }}')});
        {% endfor %}
        socket.on('message.success', (data) => {
            var arr = new Uint8Array(data['data']);
            message.success(msgpack.decode(arr));
        });
        socket.on('message.error', (data) => {
            var arr = new Uint8Array(data['data']);
            message.error(msgpack.decode(arr));
        });
        socket.on('message.info', (data) => {
            var arr = new Uint8Array(data['data']);
            message.info(msgpack.decode(arr));
        });
        socket.on('message.warning', (data) => {
            var arr = new Uint8Array(data['data']);
            message.warning(msgpack.decode(arr));
        });
        socket.on('message.loading', (data) => {
            var arr = new Uint8Array(data['data']);
            message.loading(msgpack.decode(arr));
        });
    }

    render() {
        return (
            <Router>
                <div>
                    <Route exact path='/' component={Home}/>
                    <Route path='/gallery' component={Gallery}/>
                    <Route path='/img/:id' component={ImageView}/>
                </div>
            </Router>
        );
    }
}

render(<Dashboard />, document.getElementById('app'));

// vim: set ft=javascript.jsx:
